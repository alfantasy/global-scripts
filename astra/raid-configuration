#!/bin/bash

if [ "$(id -u)" != "0" ]; then
    echo -e "\033[1;37mСкрипт должен иметь права суперпользователя (root).\033[0m" 1>&2
    echo -e "\033[1;34mЗапустите скрипт через sudo или зайдите под суперпользователя и повторите попытку.\033[0m" 1>&2
    exit 1
fi

CONFIG_FILE="/etc/raid-configuration.conf"
LOG_FILE="/var/log/raid-configuration.log"
SERVICE_NAME="raid-configuration"
SERVICE_PATH="/etc/systemd/system/${SERVICE_NAME}.service"

MAIN_LVM_VGID=""

log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $*" >> "$LOGFILE"
}

service_registry() {
    log -e "\033[1;37mРегистрация сервиса для постреализации...\033[0m"

    if [ -f "$SERVICE_PATH" ]; then
        log -e "\033[1;37mСервис уже зарегистрирован.\033[0m"
        return
    fi
    cat <<EOF > "$SERVICE_PATH"
[Unit]
Description=Специальный скрипт для реализации RAID-массива первого уровня.
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/raid-configuration --daemon-env
User=root
Group=root
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF

    chmod 644 "$SERVICE_PATH"
    cp "$0" /usr/local/bin/raid-configuration
    chmod +x /usr/local/bin/raid-configuration

    systemct daemon-reload
    systemctl enable "$SERVICE_NAME"

    log -e "\033[1;32m✅ Сервис успешно зарегистрирован.\033[0m"
}

service_unregistry() {
    log -e "\033[1;37mУдаление сервиса для постреализации...\033[0m"

    if [ ! -f "$SERVICE_PATH" ]; then
        log -e "\033[1;37mСервис не зарегистрирован.\033[0m"
        return
    fi

    systemctl disable "$SERVICE_NAME"
    rm -f "$SERVICE_PATH"
    rm -f /usr/local/bin/raid-configuration

    log -e "\033[1;32m✅ Сервис успешно удален.\033[0m"
}

get_parent_disk_from_lvm() {
    local lv_mapper_path="$1"
    local lv_path
    local vg_name
    local pv
    local disk

    echo "[i] Поиск VG для LVM тома: $lv_mapper_path">&2

    # Преобразуем /dev/mapper/VG235-lv_home → /dev/VG235/lv_home
    lv_path=$(echo "$lv_mapper_path" | sed 's|^/dev/mapper/|/dev/|' | sed 's|-|/|')

    vg_name=$(lvdisplay "$lv_path" 2>/dev/null | awk -F ' ' '/VG Name/ {print $3}')
    if [[ -z "$vg_name" ]]; then
        echo "❌ VG не найден для $lv_path">&2
        return 1
    fi

    echo "[i] Обнаружена VG: $vg_name">&2

    pv=$(pvs --noheadings -o pv_name,vg_name | awk -v vg="$vg_name" '$2 == vg {print $1}' | head -n1)
    if [[ -z "$pv" ]]; then
        echo "❌ Physical volume не найден для VG: $vg_name">&2
        return 1
    fi

    echo "[i] Физический раздел: $pv">&2

    disk=$(lsblk -no PKNAME "$pv" | head -n1 2>/dev/null)

    if [[ -z "$disk" ]]; then
        echo "❌ Не удалось определить родительский диск.">&2
        return 1
    fi

    echo "/dev/$disk"
}

global_configuration() {
    read -t 10 -p "Введите имя установленного LVM Volume Group: " MANUAL_VG_ID

    if [ -n "$MANUAL_VG_ID" ]; then
        if ! echo "$MANUAL_VG_ID" | grep -qP 'VG\K[0-9]+(?=-lv_)'; then
            echo -e "\033[1;37mНеверное имя главного LVM Volume Group: $MANUAL_VG_ID\033[0m" 1>&2
            exit 1
        fi
        MAIN_LVM_VGID="$MANUAL_VG_ID"
        echo -e "\033[1;32m✅ Используется мануальный главный LVM Volume Group: $MAIN_LVM_VGID\033[0m"
    else
        MAIN_LVM_VGID=$(lsblk -o NAME -n -r | grep -oP 'VG\K[0-9]+(?=-lv_)' | sort -u)
        if [ -z "$MAIN_LVM_VGID" ]; then
            echo -e "\033[1;37mНе удалось определить главный LVM Volume Group.\033[0m" 1>&2
            exit 1
        else
            echo -e "\033[1;32m✅ Используется главный LVM Volume Group: $MAIN_LVM_VGID\033[0m"
        fi    
    fi
}

step_one() {
    echo -e "\033[1;37mДоперезагрузочная реализация\033[0m"
    global_configuration
    echo -e "\033[1;37mПроверка доступности интернет-соединения..\033[0m"
    check_internet=$(ping -c 1 google.com >/dev/null 2>&1 && echo "1" || echo "0")

    if [ "$check_internet" == "1" ]; then
        echo -e "\033[1;32m✅ Интернет доступен\033[0m"
    else
        echo -e "\033[1;37mИнтернет недоступен\033[0m"
        exit 1
    fi

    echo -e "\033[1;37mУстановка специального пакета для работы с RAID-массивами...\033[0m"
    install_mdadm=$(apt-get install -y mdadm >/dev/null 2>&1 && echo "1" || echo "0")

    if [ "$install_mdadm" == "1" ]; then
        echo -e "\033[1;32m✅ Пакет mdadm установлен\033[0m"
    else
        echo -e "\033[1;37mПакет mdadm не установлен\033[0m"
        echo -e "\033[1;37mПроверьте интернет-соединение или /etc/apt/sources.list и повторите попытку\033[0m"
        exit 1
    fi

    echo -e "\033[1;37mПроверка наличия более двух дисков...\033[0m"
    if [ $(lsblk -dno NAME | wc -l) -le 2 ]; then
        echo -e "\033[1;37mНедостаточно дисков для создания RAID массива. Требуется как минимум три диска.\033[0m"
        exit 1
    else
        echo -e "\033[1;32m✅ Достаточно дисков для создания RAID массива.\033[0m"
    fi

    echo -e "\033[1;37mПоиск LVM...\033[0m"
    mapfile -t lvm_parts < <(lsblk -rpno NAME | grep '/dev/mapper/')

    if [ ${#lvm_parts[@]} -eq 0 ]; then
        echo -e "\033[1;37mLVM тома не найдены через /dev/mapper/.\033[0m"
        exit 1
    fi

    lvm_part="${lvm_parts[0]}"
    echo -e "\033[1;37mНайден LVM: $lvm_part\033[0m"
    parent_disk=$(get_parent_disk_from_lvm "$lvm_part")
    echo -e "\033[1;37mНайден основной диск: $parent_disk\033[0m"
    
    mapfile -t parent_parts < <(lsblk -ln -o PATH,TYPE "$parent_disk" | awk '$2 == "part" {print $1}')
    for part in "${parent_parts[@]}"; do
        echo "  - $part"
    done

    echo -e "\033[1;37mПоиск диска с аналогичным размером...\033[0m"

    # Получаем имя диска без /dev/
    base_disk=$(basename "$parent_disk")

    # Получаем размер родительского диска в байтах
    parent_size=$(lsblk -bdno SIZE "$parent_disk")

    # Ищем диск с таким же размером, исключая текущий
    mapfile -t equal_disks < <(lsblk -bdno NAME,SIZE | awk -v target="$parent_size" -v exclude="$base_disk" '$1 != exclude && $2 == target {print "/dev/"$1}')

    if [ ${#equal_disks[@]} -gt 0 ]; then
        echo -e "\033[1;32m✅ Найден диск(и) с таким же размером:\033[0m"
        for disk in "${equal_disks[@]}"; do
            echo "  - $disk"
        done
        second_disk="${equal_disks[0]}" # можно использовать его дальше
    else
        echo -e "\033[1;37m❌ Диск с аналогичным размером не найден.\033[0m"
        exit 1
    fi

    echo -e "\033[1;37mТаблица разделов будет мигрирована с $parent_disk на $second_disk\033[0m"
    read -t 5 -p "Подтвердите действия (y/n): " -n 1 -r
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo -e "\033[1;37mМиграция таблиц разделов...\033[0m"
    else
        echo -e "\033[1;37mОтмена миграции таблиц разделов.\033[0m"
        echo -e "\033[1;37mПроцесс остановлен.\033[0m"
        exit 1
    fi

    if sfdisk -d "$parent_disk" | sfdisk "$second_disk" >/dev/null 2>&1; then
        echo -e "\033[1;32m✅ Таблица разделов успешно мигрирована.\033[0m"
    else
        echo -e "\033[1;31m❌ Не удалось мигрировать таблицу разделов.\033[0m"
        exit 1
    fi

    VG_NAME="VG$MAIN_LVM_VGID"

    echo -e "\033[1;37mПоиск физического раздела, где размещён VG $VG_NAME...\033[0m"
    pv_partition=$(pvs --noheadings -o pv_name,vg_name | awk -v vg="$VG_NAME" '$2 == vg {print $1}')

    if [[ -z "$pv_partition" ]]; then
        echo -e "\033[1;31m❌ Не удалось найти физический раздел для $VG_NAME\033[0m"
        exit 1
    else
        echo -e "\033[1;32m✅ Найден физический раздел: $pv_partition\033[0m"
    fi

    # Сохраняем номер раздела, например: sda3 → 3
    part_number=$(echo "$pv_partition" | grep -oP '\d+$')
    echo -e "\033[1;37mНомер раздела: $part_number\033[0m"

    echo -e "\033[1;37mСоздание деградированного массива RAID первого уровня (зеркало)...\033[0m"

    if mdadm --create --force --metadata=1.2 /dev/md0 -l 1 -n 2 missing ${second_disk}${part_number} >/dev/null 2>&1; then
        echo -e "\033[1;32m✅ Деградированный массив RAID успешно создан.\033[0m"
    else
        echo -e "\033[1;31m❌ Не удалось создать деградированный массив RAID.\033[0m"
        exit 1
    fi

    echo -e "\033[1;37mСоздание физического тома в LVM на /dev/md0...\033[0m"

    if pvcreate /dev/md0 >/dev/null 2>&1; then
        echo -e "\033[1;32m✅ Физический том успешно создан в LVM.\033[0m"
    else
        echo -e "\033[1;31m❌ Не удалось создать физический том в LVM.\033[0m"
        exit 1
    fi

    echo -e "\033[1;37mДобавляем том в состав группы томов...\033[0m"

    vgextend VG$MAIN_LVM_VGID /dev/md0

    echo -e "\033[1;37mПеремещаем данные из существующего тома с корневой файловой системой на ранее созданный том...\033[0m"

    if pvmove ${parent_disk}${part_number} /dev/md0 >/dev/null 2>&1; then
        echo -e "\033[1;32m✅ Данные успешно перемещены.\033[0m"
    else
        echo -e "\033[1;31m❌ Не удалось переместить данные.\033[0m"
        exit 1
    fi

    echo -e "\033[1;37mИсключаем ${parent_disk}${part_number}  из группы томов...\033[0m"

    if vgreduce VG$MAIN_LVM_VGID ${parent_disk}${part_number}  >/dev/null 2>&1; then
        echo -e "\033[1;32m✅ ${parent_disk}${part_number}  успешно исключен из группы томов.\033[0m"
    else
        echo -e "\033[1;31m❌ Не удалось исключить ${parent_disk}${part_number}  из группы томов.\033[0m"
        exit 1
    fi

    echo -e "\033[1;37mУдаление тома ${parent_disk}${part_number}...\033[0m"

    if pvremove ${parent_disk}${part_number} >/dev/null 2>&1; then
        echo -e "\033[1;32m✅ Том ${parent_disk}${part_number} успешно удален.\033[0m"
    else
        echo -e "\033[1;31m❌ Не удалось удалить том ${parent_disk}${part_number}.\033[0m"
        exit 1
    fi

    echo -e "\033[1;37mПрименение системных изменений...\033[0m"

    if update-initramfs -uk all >/dev/null 2>&1; then
        if update-grub >/dev/null 2>&1; then
            echo -e "\033[1;32m✅ Системные изменения успешно применены.\033[0m"
        else
            echo -e "\033[1;31m❌ Не удалось применить системные изменения.\033[0m"
            exit 1
        fi
    else
        echo -e "\033[1;31m❌ Не удалось применить системные изменения.\033[0m"
        exit 1
    fi

    echo -e "\033[1;37mДоперезагрузочный этап завершен.\033[0m"

    echo -e "\033[1;37mСоздание конфигурационного файла для послезагрузочного этапа...\033[0m"

    echo "PARENT_DISK=$parent_disk" > "$CONFIG_FILE"
    echo "SECOND_DISK=$second_disk" >> "$CONFIG_FILE"
    echo "PART_NUMBER=$part_number" >> "$CONFIG_FILE"

    echo -e "\033[1;37mКомпьютер будет автоматически перезагружен в течении 30 секунд.\033[0m"

    echo -e "\033[1;37mВнимание! После перезагрузки, скрипт автоматически активирует второй этап через автозагрузку, но...\033[0m"
    echo -e "\033[1;37m...действия скрипта будут выполняться в фоне из-за невозможности запуска сессии fly-dm от имени суперпользователя...\033[0m"
    echo -e "\033[1;37m..поэтому для отслеживания действий скрипта после перезагрузки и конец его действий, можно посмотреть следующий лог файл:\033[0m"
    echo -e "\033[1;37m...$LOG_FILE\033[0m"]

    service_registry

    sleep 30
    reboot
}

step_two() {
    log -e "\033[1;32m✅ Послезагрузочный этап запущен. Скрипт активен.\033[0m"

    log -e "\033[1;37mПослезагрузочный этап...\033[0m"

    log -e "\033[1;37mПроверка деградированного массива RAID...\033[0m"

    mdadm_output=$(mdadm --detail /dev/md0 2>/dev/null)

    state=$(echo "$mdadm_output" | awk -F': ' '/State/ {print $2}')
    active=$(echo "$mdadm_output" | awk -F': ' '/Active Devices/ {print $2}' | tr -d ' ')
    working=$(echo "$mdadm_output" | awk -F': ' '/Working Devices/ {print $2}' | tr -d ' ')
    failed=$(echo "$mdadm_output" | awk -F': ' '/Failed Devices/ {print $2}' | tr -d ' ')

    log -e "\033[1;37mСостояние массива: $state\033[0m"
    log -e "\033[1;37mАктивных устройств: $active, Рабочих: $working, Неисправных: $failed\033[0m"

    # Условия: деградирован и одно устройство
    if [[ "$state" == *degraded* && "$active" == "1" && "$working" == "1" && "$failed" == "0" ]]; then
        log -e "\033[1;32m✅ Массив действительно деградирован и содержит одно устройство — всё верно.\033[0m"
    else
        log -e "\033[1;31m❌ Состояние массива не соответствует ожидаемому (degraded, 1 устройство).\033[0m"
        exit 1
    fi

    if [ ! -f "$CONFIG_FILE" ]; then
        log -e "\033[1;31m❌ Файл конфигурации не найден.\033[0m"
        exit 1
    fi

    # shellcheck disable=SC1090
    source "$CONFIG_FILE"

    if [[ -z "$PARENT_DISK" || -z "$SECOND_DISK" || -z "$PART_NUMBER" ]]; then
        log -e "\033[1;31m❌ Не удалось загрузить данные из конфигурационного файла.\033[0m"
        exit 1
    fi

    log -e "\033[1;32m✅ Данные из конфигурационного файла успешно загружены.\033[0m"

    log -e "\033[1;37mОсновной диск: $PARENT_DISK\033[0m"
    log -e "\033[1;37mВторой диск: $SECOND_DISK\033[0m"
    log -e "\033[1;37mНомер диска в RAID: $PART_NUMBER\033[0m"

    log -e "\033[1;37mВыполняем миграцию системных и загрузочных разделов посекторно...\033[0m"

    if dd if=${PARENT_DISK}1 of=${SECOND_DISK}1 >/dev/null 2>&1; then
        log -e "\033[1;32m✅ Миграция первого раздела успешно выполнена.\033[0m"
    else
        log -e "\033[1;31m❌ Не удалось выполнить миграцию первого раздела.\033[0m"
        exit 1
    fi

    if dd if=${PARENT_DISK}2 of=${SECOND_DISK}2 >/dev/null 2>&1; then
        log -e "\033[1;32m✅ Миграция второго раздела успешно выполнена.\033[0m"
    else
        log -e "\033[1;31m❌ Не удалось выполнить миграцию второго раздела.\033[0m"
        exit 1
    fi

    log -e "\033[1;32m✅ Миграция системных и загрузочных разделов успешно выполнена.\033[0m"
    
    log -e "\033[1;37mМонтирование загрузочного раздела...\033[0m"

    if mount ${SECOND_DISK}2 /mnt >/dev/null 2>&1; then
        log -e "\033[1;32m✅ Загрузочный раздел успешно монтирован.\033[0m"
    else
        log -e "\033[1;31m❌ Не удалось монтировать загрузочный раздел.\033[0m"
        exit 1
    fi

    log -e "\033[1;37mРегистрация и установка GRUB в монтированный раздел с учетом RAID...\033[0m"

    if grub-install --boot-directory /mnt ${SECOND_DISK} >/dev/null 2>&1; then
        log -e "\033[1;32m✅ GRUB успешно установлен в монтированный раздел.\033[0m"
    else
        log -e "\033[1;31m❌ Не удалось установить GRUB в монтированный раздел.\033[0m"
        exit 1
    fi

    if umount ${SECOND_DISK}2 >/dev/null 2>&1; then
        log -e "\033[1;32m✅ Загрузочный раздел успешно демонтирован.\033[0m"
    else
        log -e "\033[1;31m❌ Не удалось демонтировать загрузочный раздел.\033[0m"
        exit 1
    fi

    log -e "\033[1;37mВосстановление функционала RAID-массива...\033[0m"

    if mdadm /dev/md0 --add-spare ${PARENT_DISK}${PART_NUMBER} >/dev/null 2>&1; then
        log -e "\033[1;37m✅ RAID-массив успешно восстановлен.\033[0m"
    else
        log -e "\033[1;31m❌ Не удалось восстановить RAID-массив.\033[0m"
        exit 1
    fi

    STATUS_CHECKING=$(mdadm --detail /dev/md0)
    consistency_policy=$(echo "$STATUS_CHECKING" | awk -F': ' '/Consistency Policy/ {print $2}' | xargs)
    raid_state=$(echo "$STATUS_CHECKING" | awk -F': ' '/State/ {print $2}' | xargs)

    log -e "\033[1;37mСостояние RAID: $raid_state\033[0m"
    log -e "\033[1;37mПолитика согласованности: $consistency_policy\033[0m"

    # Проверка состояния
    [[ "$raid_state" == *degraded* ]] && log -e "\033[1;32m✅ RAID в состоянии деградации.\033[0m" || log -e "\033[1;31m❌ RAID не деградирован.\033[0m"
    [[ "$raid_state" == *clean* ]]    && log -e "\033[1;32m✅ RAID в состоянии чистоты (clean).\033[0m" || log -e "\033[1;31m❌ RAID не в состоянии clean.\033[0m"
    [[ "$raid_state" == *recovering* ]] && log -e "\033[1;32m✅ RAID восстанавливается (recovering).\033[0m" || log -e "\033[1;33m⚠️ RAID пока не восстанавливается.\033[0m"

    # Проверка политики согласованности
    [[ "$consistency_policy" == *resync* ]] && log -e "\033[1;32m✅ RAID синхронизируется (resync).\033[0m" || log -e "\033[1;31m❌ RAID не в процессе resync.\033[0m"

    # Можно добавить проверку, что degraded + clean = норм для текущего этапа
    if [[ "$raid_state" == *degraded* && "$raid_state" == *clean* ]]; then
        log -e "\033[1;32m✅ RAID готов к восстановлению (degraded + clean).\033[0m"
    else
        log -e "\033[1;31m❌ RAID не в ожидаемом состоянии для восстановления.\033[0m"
        exit 1
    fi

    log -e "\033[1;37mВосстановление функционала RAID-массива завершено.\033[0m"

    log -e "\033[1;32m✅ Все этапы завершены.\033[0m"

    log -e "\033[1;37mСкрипт автоматически уберет себя из автозагрузки.\033[0m"

    service_unregistry

    exit 0
}

case "$1" in
    --start)
        echo "Выберите этап конфигурации:"
        echo "1. Доперезагрузочная реализация"
        echo "2. Послезагрузочная реализация"

        read -p "Введите номер этапа: " STEP

        case "$STEP" in
            1)
            step_one
            ;;
            2)
            step_two
            ;;
            *)
            echo -e "\033[1;37mНеверный номер этапа: $STEP\033[0m" 1>&2
            exit 1
            ;;
        esac
        ;;
    --help)
        echo "Использование raid-configuration:"
        echo "  --start - Запустить процесс полностью"
        echo "  --help - Показать справку"
        echo "  --get-vg - Получить главный LVM Volume Group"
        echo "  --daemon-env - Автозапуск второго этапа конфигурации"
        ;;
    --get-vg)
        MAIN_LVM_VGID=$(lsblk -o NAME -n -r | grep -oP 'VG\K[0-9]+(?=-lv_)' | sort -u)
        echo -e "\033[1;37mГлавный LVM Volume Group: $MAIN_LVM_VGID\033[0m"
        exit 0
        ;;
    --daemon-env)
        step_two
        ;;
    *)
        echo -e "\033[1;37mНеверная опция: $1. Используйте $0 --help\033[0m" 1>&2
        exit 1
        ;;
esac


